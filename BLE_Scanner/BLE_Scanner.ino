/*
   Based on Neil Kolban example for IDF: https://github.com/nkolban/esp32-snippets/blob/master/cpp_utils/tests/BLE%20Tests/SampleScan.cpp
   Ported to Arduino ESP32 by Evandro Copercini
*/

#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEScan.h>
#include <BLEAdvertisedDevice.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels

#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

static const unsigned char diego_logo [] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x1F, 0xF0, 0x00, 0x00, 0x00,
0x00, 0x01, 0xE1, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x03, 0xE0, 0x0F, 0x00, 0x00, 0x00,
0x00, 0x06, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x3C, 0x00, 0x00, 0x80, 0x00, 0x00,
0x00, 0x18, 0x0E, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x60, 0x1C, 0x00, 0x00, 0x00, 0x00,
0x00, 0x30, 0x18, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0xC0, 0x30, 0x00, 0x00, 0x00, 0x00,
0x00, 0x20, 0x30, 0x10, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC3, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00,
0x00, 0x20, 0x60, 0x33, 0x00, 0x00, 0x00, 0x00, 0x04, 0x83, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x40, 0x22, 0x00, 0x00, 0x00, 0x00, 0x09, 0x82, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xC0, 0x64, 0x38, 0x70, 0xF0, 0x00, 0x11, 0x01, 0x81, 0x87, 0x99, 0x32, 0x39, 0xC0,
0x00, 0x01, 0x80, 0xCE, 0x69, 0x89, 0x24, 0x03, 0xFF, 0xC0, 0x03, 0x09, 0x37, 0x6E, 0x6B, 0x40,
0x00, 0x11, 0x01, 0xC9, 0xD7, 0x36, 0x38, 0x3C, 0x42, 0x20, 0x02, 0x31, 0xEE, 0xDD, 0xD6, 0x70,
0x00, 0x62, 0x03, 0x9B, 0xEE, 0xE4, 0x60, 0x30, 0x86, 0x00, 0x06, 0x23, 0x75, 0xEB, 0xEB, 0x80,
0x00, 0x82, 0x07, 0x37, 0x9D, 0x6C, 0xC0, 0x01, 0x06, 0x00, 0x0C, 0x66, 0xE7, 0xCF, 0x96, 0x00,
0x03, 0x06, 0x1C, 0x2A, 0x7A, 0xF9, 0x80, 0x02, 0x04, 0x00, 0x08, 0x4C, 0xC1, 0x82, 0x6F, 0x00,
0x04, 0x00, 0x78, 0x33, 0x8D, 0x8E, 0x00, 0x04, 0x0C, 0x00, 0x18, 0x70, 0x81, 0x03, 0x9C, 0x00,
0x08, 0x01, 0xE0, 0x00, 0x03, 0x80, 0x00, 0x18, 0x0C, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
0x08, 0x07, 0x80, 0x00, 0x0D, 0x00, 0x08, 0x30, 0x0E, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0F, 0xFC, 0x00, 0x00, 0x12, 0x00, 0x08, 0xC0, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00,
0x03, 0x80, 0x00, 0x00, 0x26, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const unsigned char scanning [] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x3C, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xE0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x01, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x07, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x06, 0x13, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x0C, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x0C, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x70, 0x03, 0x83, 0xC1, 0x8C, 0x31, 0x84, 0x31, 0x81, 0xE0, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x0C, 0x0E, 0x8E, 0x23, 0x9C, 0x73, 0x8E, 0x73, 0x87, 0x10, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x02, 0x1C, 0x98, 0xE3, 0x78, 0x6F, 0x1C, 0x6F, 0x0E, 0x10, 0x00, 0x00, 0x00,
0x00, 0x00, 0x0E, 0x02, 0x31, 0x71, 0xCE, 0x99, 0xD3, 0x38, 0xD3, 0x38, 0xE0, 0x00, 0x00, 0x00,
0x00, 0x00, 0x30, 0x02, 0x70, 0xE3, 0x9D, 0x33, 0xA6, 0x71, 0xA6, 0x71, 0xC0, 0x00, 0x00, 0x00,
0x00, 0x00, 0xC0, 0x06, 0xE1, 0xE7, 0x2E, 0x65, 0xCC, 0xF3, 0xCC, 0xF2, 0xC0, 0x00, 0x00, 0x00,
0x00, 0x01, 0x00, 0x0C, 0xC3, 0xDB, 0x5C, 0x6B, 0x8D, 0x6F, 0x8D, 0x6D, 0xA0, 0x08, 0x20, 0x80,
0x00, 0x06, 0x00, 0x3C, 0xCD, 0xA6, 0x98, 0xD3, 0x1A, 0xF3, 0x1A, 0xD3, 0xC0, 0x1C, 0x71, 0xC0,
0x00, 0x08, 0x00, 0x78, 0xF0, 0xC7, 0x10, 0x62, 0x0C, 0x62, 0x0C, 0x67, 0x00, 0x30, 0xC3, 0x00,
0x00, 0x18, 0x01, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00,
0x00, 0x30, 0x0F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x00,
0x00, 0x20, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00, 0x00,
0x00, 0x3F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x98, 0x00, 0x00, 0x00, 0x00,
0x00, 0x1F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x38, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x30, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x60, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xC0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x80, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const unsigned char no_tags [] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x00, 0x01, 0xFF, 0xE0, 0x00, 0x00, 0x00,
0x00, 0x0C, 0x20, 0x00, 0x00, 0x01, 0xF0, 0x07, 0x80, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x00, 0x00,
0x00, 0x30, 0x20, 0x20, 0x07, 0x1E, 0x00, 0x00, 0x40, 0x00, 0xE0, 0x30, 0x00, 0x00, 0x00, 0x0C,
0x00, 0xC0, 0x20, 0xF0, 0x0C, 0x30, 0x0E, 0x00, 0x00, 0x03, 0x80, 0x68, 0x00, 0x00, 0x00, 0x18,
0x01, 0x80, 0x61, 0xC0, 0x18, 0xE0, 0x18, 0x00, 0x00, 0x06, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x30,
0x03, 0x00, 0xC7, 0x80, 0x7F, 0xFC, 0x30, 0x00, 0x00, 0x0C, 0x01, 0x80, 0x00, 0x00, 0x00, 0x60,
0x0C, 0x00, 0xC9, 0x81, 0xB1, 0x80, 0x60, 0x00, 0x00, 0x08, 0x03, 0x00, 0x00, 0x00, 0x00, 0x40,
0x08, 0x01, 0x93, 0x00, 0x61, 0x00, 0xC0, 0x00, 0x00, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00, 0xC0,
0x18, 0x03, 0x66, 0x1E, 0x40, 0xC0, 0xC1, 0xC1, 0xC7, 0x02, 0x1F, 0xFF, 0x33, 0x19, 0x87, 0x80,
0x30, 0x03, 0x84, 0x24, 0xC0, 0x01, 0x86, 0x26, 0x2D, 0x00, 0xEC, 0x12, 0x66, 0x37, 0x99, 0x00,
0x18, 0x07, 0x0C, 0xC7, 0x90, 0x01, 0x0C, 0xCC, 0xD9, 0xC1, 0x98, 0x63, 0xCE, 0x6B, 0x33, 0x20,
0x00, 0x0E, 0x18, 0x8D, 0xA0, 0x03, 0x1B, 0x9B, 0x8E, 0x01, 0x10, 0x46, 0x9C, 0xF6, 0x6E, 0x40,
0x00, 0x0C, 0x19, 0x9B, 0x40, 0x06, 0x35, 0x35, 0x98, 0x00, 0x30, 0xCD, 0xA9, 0xE4, 0xD4, 0x80,
0x00, 0x18, 0x11, 0x32, 0x80, 0x04, 0x6B, 0xEB, 0xFC, 0x00, 0x20, 0x99, 0x5E, 0xCF, 0xAD, 0x00,
0x00, 0x30, 0x31, 0xC3, 0x00, 0x0C, 0x33, 0x36, 0x70, 0x00, 0x40, 0xE1, 0x98, 0x8C, 0xCE, 0x00,
0x00, 0x20, 0x20, 0x00, 0x00, 0x08, 0x00, 0x0E, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x70, 0x20, 0x00, 0x00, 0x18, 0x00, 0x34, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x40, 0x20, 0x60, 0x00, 0x1C, 0x00, 0x48, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8,
0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8,
0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8,
0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


int scanTime = 3; //In seconds
BLEScan* pBLEScan;


String Names[10];
int Device_RSSI[10];
// index del arreglo spara nombres y RSSI 
int scan_position=0;

int numberDevices=0;

class MyAdvertisedDeviceCallbacks: public BLEAdvertisedDeviceCallbacks {
    void onResult(BLEAdvertisedDevice advertisedDevice) {
      //Serial.printf("Advertised Device: %s \n", advertisedDevice.toString().c_str());
        //Serial.print("  RSSI:");
        //Serial.println(advertisedDevice.getRSSI());
        if(advertisedDevice.haveName()== true){
                if (advertisedDevice.getName().c_str()[0]== 'T'){
                  Names[scan_position]= advertisedDevice.getName().c_str();
                  Device_RSSI[scan_position]=advertisedDevice.getRSSI();
                  scan_position ++; 
                }

          }

    }
};

void setup() {
  
  Serial.begin(9600);
 
 
  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }

  // Show initial display buffer contents on the screen --
  // the library initializes this with an Adafruit splash screen.
    // Clear the buffer
  display.clearDisplay();

  
  logo_display(diego_logo);
  display.display();
  delay(2000); // Pause for 2 seconds
  logo_display(scanning);
   delay(1000); // Pause for 2 seconds

  BLEDevice::init("");
  pBLEScan = BLEDevice::getScan(); //create new scan
  pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());
  pBLEScan->setActiveScan(true); //active scan uses more power, but get results faster
  pBLEScan->setInterval(100);
  pBLEScan->setWindow(99);  // less or equal setInterval value

      // Limpiar los dos Array 
  for (int i=0; i< (sizeof(Device_RSSI)/sizeof(Device_RSSI[0]));i++){
    Device_RSSI[i]=0;
  }
   for (int i=0; i< (sizeof(Names)/sizeof(Names[0]));i++){
    Names[i]="";
  }
}

void loop() {

  BLEDevice::init("");
  // put your main code here, to run repeatedly:
  BLEScanResults foundDevices = pBLEScan->start(scanTime, false);
  //Serial.print("Devices found: ");
  //Serial.println(foundDevices.getCount());
  //Serial.println("Scan done!");
  PrintJSON();
  display_devices();
  pBLEScan->clearResults();   // delete results fromBLEScan buffer to release memory
  scan_position=0;

  // Limpiar los dos Array 
  for (int i=0; i< (sizeof(Device_RSSI)/sizeof(Device_RSSI[0]));i++){
     Device_RSSI[i]=0;
  }
  for (int i=0; i< (sizeof(Names)/sizeof(Names[0]));i++){
      Names[i]="";
  }
    
  delay(200);
  BLEDevice::deinit(false);
}

void PrintJSON(){
  Serial.print("{\"devices\":[");
  for (int i=0; i< (sizeof(Names)/sizeof(Names[0]));i++){
    if(Names[i]==""){
      Serial.println("],");
      break;
    }
    else{
      Serial.print("{\"name\":");
      Serial.print("\"");
      Serial.print(Names[i]);
      Serial.print("\",");
      Serial.print("\"rssi\":");
      Serial.print(Device_RSSI[i]);
    
      if(Names[i+1]==""){
        Serial.print("}");
      }
      else{
        Serial.print("},");
      }
    }
  }
  
}

void logo_display(const unsigned char* logo) {
  display.clearDisplay();

  display.drawBitmap(
   0 ,
    0,
    logo, SCREEN_WIDTH, SCREEN_HEIGHT, 1);
  display.display();

}

void display_devices(){
    display.clearDisplay();
    display.setTextSize(1);     
    display.setTextColor(SSD1306_WHITE);   

    // Go over the array and take the names
    for(int i = 0; i < (sizeof(Names)/ sizeof(Names[0]));i++){
      if(Names[i]!= ""){
         numberDevices++;
      }
    }
    if(numberDevices){
        //Horizontal Line
        display.drawLine(0, 16,display.width() -1,16, SSD1306_WHITE);
        //Vertical Lines
        display.drawLine(42, 0,42,display.height()-1, SSD1306_WHITE);
        display.drawLine(84, 0,84,display.height()-1, SSD1306_WHITE);
        display.display();
       for(int i = 0; i < (sizeof(Names)/ sizeof(Names[0]));i++){
         //Show the current Name in a specific positión of the array 
         if( i <= 2 ){
          //Show in the grid
           display.setCursor(i*44,0);          
           display.println(Names[i]);
         }
         else{
          //Show in the specific place
           display.setCursor((i-3)*44,16);            
           display.println(Names[i]);
         }
          display.display();
        }
    }
    else{
      logo_display(no_tags);
    }

     numberDevices=0;
  
}
